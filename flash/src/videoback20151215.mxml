<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="init();" width="340" height="320">
	<mx:Style>
		Alert{font-size:12px;}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			
			import flash.net.NetStream
			
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.SliderEvent;
			import mx.events.VideoEvent;
			import mx.netmon.NetworkMonitor;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			private var str:String;
			private var videoPro:Video;
			private var camera:Camera;      
			private var inNs:NetStream;
			private var outNs:NetStream;
			private var nc:NetConnection;
			private var m_pictureBitmapData:BitmapData //定义视频截图
			private static const DEFAULT_CAMERA_WIDTH:Number = 320; //摄像头显示宽度
			private static const DEFAULT_CAMERA_HEIGHT:Number = 240; //摄像头显示高度
			// private var t_ws_SaveVideo:HTTPService = new HTTPService();
			[Bindable]
			private var m_pictureData:String;
			
			private var lastvideodeoName:String = "";   //视频录制后保存的名字
			private var _videoSaveActionUrl:String = ""; //保存视频的服务URL
			private var _videoServerUrl:String = "rtmp://video.eloancn.com/videoAuth";//可用的视频服务域名
			private var _videoServerCheckUrl:String = "http://www.eloancn.com/videoServer.action";//视频服务验证请求
			private var index:int = 0; //系统标识，0标识没有连接视频服务，1标识已连接视频服务
			private var serverIndex:String;//系统服务标识，用于标识某次连接是否有效或者过期等
			
			public function init():void{
				setupcameraera();    //初始化摄像头信息
				var parameters:Object = FlexGlobals.topLevelApplication.parameters;//Application.application.parameters;
				_videoServerUrl = parameters.webContent;
				_videoSaveActionUrl = parameters.webContentS;
				t_ws_SaveVideo.url=_videoSaveActionUrl;
				_videoServerCheckUrl = parameters.videoServerUrl;
				
			}
			
			//初始化摄像头信息
			public function setupcameraera():void{
				//启动摄像头
				camera = Camera.getCamera();
				if(camera != null){
					camera.addEventListener(StatusEvent.STATUS,onStatusHandler);
					camera.setMode(DEFAULT_CAMERA_WIDTH,DEFAULT_CAMERA_HEIGHT,30);
					camera.setQuality(0,85);  //设置清晰度
					videoPro = new Video();
					videoPro.width = 320;
					videoPro.height = 240;
					videoPro.attachCamera(camera);
					t_vd_Video.addChild(videoPro);
				}else{
					Alert.show("错误：无法链接到活动摄像头！");
					startRec.enabled = false;
				}
			}
			
			public function onStatusHandler(event:StatusEvent):void{
				if(!camera.muted){   //判断摄像头存不存在
					startRec.enabled = true;
				}else{
					Alert.show("您拒绝使用摄像头，无法使用拍照功能。","提示：",Alert.OK);
					startRec.enabled = false;
				}
				camera.removeEventListener(StatusEvent.STATUS,onStatusHandler);
			}
			
			public function clickConnect(evt:MouseEvent):void{
				//验证视频服务是否可用
				var v:URLVariables = new URLVariables("type=0");  
				var r:URLRequest = new URLRequest();
				r.url = _videoServerCheckUrl;
				r.method = URLRequestMethod.POST;
				r.data = v;
				
				var l:URLLoader = new URLLoader();
				l.load(r);
				//连接 验证视频服务成功时，进行以下操作
				l.addEventListener(Event.COMPLETE,function(e:Event):String{
					var l:URLLoader = e.target as URLLoader;  
					var o:* = JSON.parse(l.data);  
					
					//返回的tip为空时，表示服务可用，否则表示不可用并给予用户提示
					var tip:String = o.tip;
					if(tip == null || tip == ''){
						//连接red5服务器
						nc = new NetConnection();
						nc.addEventListener(NetStatusEvent.NET_STATUS,nsHandler);
						nc.connect(_videoServerUrl);
					}else{
						Alert.show(tip);
					}
					return null;
				});
				
				//连接验证视频服务失败时，直接连接服务
				l.addEventListener(IOErrorEvent.IO_ERROR,function (e:IOErrorEvent):void{
					//连接red5服务器
					nc = new NetConnection();
					nc.addEventListener(NetStatusEvent.NET_STATUS,nsHandler);
					nc.connect(_videoServerUrl);
				});
			}
			
			public function nsHandler(evt:NetStatusEvent):void{
				
				if (evt.info.code == "NetConnection.Connect.Success"){           //如果连接成功
										
					index = 1;//系统标识置为1，已连接视频服务
					
					//视频服务连接成功，通知服务端，正在使用的视频服务数量+1
					var v:URLVariables = new URLVariables("type=1");  
					var r:URLRequest = new URLRequest();  
					r.url = _videoServerCheckUrl;  
					r.method = URLRequestMethod.POST;  
					r.data = v;
					
					var l:URLLoader = new URLLoader();  
					l.load(r);  
					l.addEventListener(Event.COMPLETE,function(e:Event):String{
						var l:URLLoader = e.target as URLLoader;  
						var o:* = JSON.parse(l.data);  
						serverIndex = o.serverIndex;
						return null;
					});
					
					playClick();
					
				}else{
					Alert.show("连接失败");   
				}
			}
			
			public function playClick():void{
				if(videoPro != null){
					videoPro.clear();
					t_vd_Video.removeChild(videoPro);
				}
				videoPro = new Video();
				videoPro.width = 320;
				videoPro.height = 240;
				videoPro.attachCamera(camera);
				t_vd_Video.addChild(videoPro);
				outNs = new NetStream(nc);      
				outNs.attachCamera(camera);   //把摄像头存入outNs
				outNs.attachAudio(Microphone.getMicrophone());
				//outNs.attachAudio(mic);     //把麦克风存入outNs
				lastvideodeoName = "REPLAY" + Math.random();
				outNs.publish(lastvideodeoName, "record");	
				startRec.enabled = false;
				stopRec.enabled = true;
				playVod.enabled = false;
				submit.enabled = false;
			}
			
			public function stopClick(evt:MouseEvent):void{
				//关闭ns与red5的连接
				if(outNs != null){
					outNs.close();
				}
				
				if(inNs != null){
					inNs.close();
				}
				
				videoPro.clear();
				t_vd_Video.removeChild(videoPro);
				videoPro = null;
				
				//锁定开始按键使其生效
				startRec.enabled = true;
				
				//锁定停止按键使其失效
				stopRec.enabled = false;
				playVod.enabled = true;
				submit.enabled = true;
				
				//若已连接视频服务，则通知系统将正在使用的视频服务数量 -1
				if(index == 1){
					var v:URLVariables = new URLVariables(); 
					v.type = -1;
					v.serverIndex = serverIndex;
					var r:URLRequest = new URLRequest();  
					r.url = _videoServerCheckUrl;
					r.method = URLRequestMethod.POST;  
					r.data = v;  
					
					var l:URLLoader = new URLLoader();  
					l.load(r);
					index = 0;
					serverIndex = "";
				}
				
			}
			
			private function playLastvideo(evt:MouseEvent):void{
				if(nc!=null){
					//addEventListener(Event.ENTER_FRAME,onEnterFrame);
					inNs = new NetStream(nc);
					var clientobj:Object=new Object();
					clientobj.onMetaData=function():void{};
					clientobj.onPlayStatus=doComplete;
					inNs.client=clientobj;
					
					//删除原_localvideodeo，便于在录制和播放视频之间切换
					videoPro = new Video();
					videoPro.width = 320;
					videoPro.height = 240;
					videoPro.attachNetStream(inNs);
					t_vd_Video.addChild(videoPro);
					inNs.play(lastvideodeoName+".flv");
				}
				startRec.enabled = false;
				stopRec.enabled = true;
				playVod.enabled = false;
				submit.enabled = false;
			}
			
			private function submitVideo(evt:MouseEvent):void{
				Alert.show("确认保存视频。","提示：",Alert.OK|Alert.NO,this,function(evtIn:CloseEvent):void{
					if(evtIn.detail == Alert.OK)
					{
						var params:URLVariables = new URLVariables();
						params.videoFileName = lastvideodeoName;
						t_ws_SaveVideo.send(params);
					}
				});
			}
			private function doComplete(evt:Object):void{
				startRec.enabled = true;
				stopRec.enabled = false;
				playVod.enabled = true;
				submit.enabled = true;
			}
			
			//WebService保存图片成功事件
			private function onSaveVideoResult(event:ResultEvent):void
			{
				var json:Object = new Object();
				if(event.result != null && event.result.toString() != null){
					json = JSON.parse(event.result.toString());
				}
				
				if(json.tip == null)
				{
					Alert.show("保存成功,请等待审核!","提示",Alert.OK);
					camera = Camera.getCamera(null); 
					camera = null; 
					if(videoPro != null)
						videoPro.attachCamera(null);
					startRec.enabled = false;
					stopRec.enabled = false;
					playVod.enabled = false;
					submit.enabled = false;
				}
				else
				{
					Alert.show(json.tip,"提示",Alert.OK);
				}
			}
			
			//连接WebService失败事件
			public function onSaveVideoFault(event:FaultEvent):void
			{
				//Alert.show(event.fault.toString(),"提示",Alert.OK);
				Alert.show("连接服务器失败。","提示",Alert.OK);
			}
			
			//保存图片成功后的弹出窗口确认事件
			private function onAlertCloseHandler(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					ExternalInterface.call("saveVideoSuccess");
				}
			}
			
			//保存按钮事件，保存视频截图
			//通过WebService保存
			private function SaveVideo():void
			{
				m_pictureData = "";
				for(var i:int = 0; i < DEFAULT_CAMERA_WIDTH; i++)
				{
					for(var j:int = 0; j < DEFAULT_CAMERA_HEIGHT; j++)
					{
						if(m_pictureData.length > 0)
						{
							m_pictureData += "," + m_pictureBitmapData.getPixel32(i,j).toString();
						}
						else
						{
							m_pictureData = m_pictureBitmapData.getPixel32(i,j).toString();
						}
					}
				}
				
				var params:URLVariables = new URLVariables();
				params.width = DEFAULT_CAMERA_WIDTH;
				params.height = DEFAULT_CAMERA_HEIGHT;
				params.bitmap_data = m_pictureData;
				t_ws_SaveVideo.send(params);
			}
			
		]]>
	</mx:Script>
	
	<mx:HTTPService url="" id="t_ws_SaveVideo" resultFormat="text" showBusyCursor="true" method="POST" useProxy="false" result="onSaveVideoResult(event)" fault="onSaveVideoFault(event)"/>
	<mx:Panel cornerRadius="1" width="340" height="320" layout="absolute" borderAlpha="1">
		<mx:VideoDisplay id="t_vd_Video" width="320" height="240"/>
		<mx:ControlBar horizontalAlign="center">
			<mx:Button id="startRec" label="开始录制" click="this.clickConnect(event);" enabled="true" />   
			<mx:Button id="stopRec" label="停止录制" click="this.stopClick(event);" enabled="false" />   
			<mx:Button id="playVod" label="播放" click="this.playLastvideo(event);" enabled="false" />
			<mx:Button id="submit" label="提交" click="this.submitVideo(event);" enabled="false" />
		</mx:ControlBar>
	</mx:Panel>
</mx:Application>
